<%- include('../partials/header') %>

<div class="reader-container">
  <div class="reader-header">
    <div class="book-info">
      <h1><%= book.title %></h1>
      <h2>Episode <%= currentEpisode %>: <%= book.episodeTitle %></h2>
    </div>
    <div class="reader-controls">
      <div class="page-navigation">
        <% if (prevPage) { %>
          <a href="/book/read/<%= book.filename %>?episode=<%= prevPage.episodeNumber %>&page=<%= prevPage.pageNumber %>" class="btn btn-primary">Previous Page</a>
        <% } %>
        
        <span class="page-info">Page <%= currentPage %> of <%= totalPagesInEpisode %> (Episode <%= currentEpisode %>)</span>
        
        <% if (nextPage) { %>
          <a href="/book/read/<%= book.filename %>?episode=<%= nextPage.episodeNumber %>&page=<%= nextPage.pageNumber %>" class="btn btn-primary">Next Page</a>
        <% } %>
      </div>

      <!-- Changed path here from /book to /dashboard -->
      <a href="<%= previousPage %>" class="btn btn-secondary close-btn">Close</a>
    </div>


  </div>
  
  
  
  <div class="reader-content" data-background="<%= backgroundImagePath %>">
    <div class="page-text">
      <%- textWithSpans %>
    </div>
  </div>
  
  <div id="word-popup" class="word-popup" style="display: none;">
    <div class="word-popup-content">
      <div id="translation" class="translation"></div>
      <div id="sentence-translation" class="sentence-translation"></div>
      <div class="word-actions">
        <button id="add-to-bank-btn" class="btn btn-sm btn-secondary">Add to Word Bank</button>
        <button id="close-popup-btn" class="btn btn-sm btn-light">Close</button>
      </div>
    </div>
  </div>
  
  <div id="add-word-form" class="add-word-form" style="display: none;">
    <div class="form-content">
      <h3>Add to Word Bank</h3>
      <form id="wordBankForm">
        <div class="form-group">
          <label for="word">Word</label>
          <input type="text" id="word" name="word" class="form-control" readonly>
        </div>
        
        <div class="form-group">
          <label for="translation">Translation</label>
          <input type="text" id="word-translation" name="translation" class="form-control" required>
        </div>
        
        <div class="form-actions">
          <button type="submit" class="btn btn-primary">Add Word</button>
          <button type="button" id="cancel-add-word" class="btn btn-secondary">Cancel</button>
        </div>
      </form>
    </div>
  </div>


  <div class="reader-header">
    <div class="book-info">

      <h2>Episode <%= currentEpisode %>: <%= book.episodeTitle %></h2>
    </div>
    <div class="reader-controls">
      <div class="page-navigation">
        <% if (prevPage) { %>
          <a href="/book/read/<%= book.filename %>?episode=<%= prevPage.episodeNumber %>&page=<%= prevPage.pageNumber %>" class="btn btn-primary">Previous Page</a>
        <% } %>
        
        <span class="page-info">Page <%= currentPage %> of <%= totalPagesInEpisode %> (Episode <%= currentEpisode %>)</span>
        
        <% if (nextPage) { %>
          <a href="/book/read/<%= book.filename %>?episode=<%= nextPage.episodeNumber %>&page=<%= nextPage.pageNumber %>" class="btn btn-primary">Next Page</a>
        <% } %>
      </div>

      <!-- Changed path here from /book to /dashboard -->
      <a href="/dashboard" class="btn btn-secondary close-btn">Close</a>
    </div>
  </div>


    <script src="/js/bookReader.js"></script>
  
  

</div>

<script>

document.addEventListener('DOMContentLoaded', function() {
  const selectableWords = document.querySelectorAll('.selectable-word');
  const wordPopup = document.getElementById('word-popup');
  const addToBankBtn = document.getElementById('add-to-bank-btn');
  const closePopupBtn = document.getElementById('close-popup-btn');
  const translation = document.getElementById('translation');
  const sentenceTranslation = document.getElementById('sentence-translation');
  const addWordForm = document.getElementById('add-word-form');
  const wordInput = document.getElementById('word');
  const wordTranslationInput = document.getElementById('word-translation');
  const wordBankForm = document.getElementById('wordBankForm');
  const cancelAddWord = document.getElementById('cancel-add-word');
  const isFirstPage = <%= isFirstPageOfEpisode %>;
  const episodeNumber = <%= currentEpisode %>;
  const filename = '<%= book.filename %>';
  const isFirstPage = <%= isFirstPageOfEpisode %>;
  const episodeNumber = <%= currentEpisode %>;
  const filename = '<%= book.filename %>';


  
  let selectedWord = '';
  let selectedSentence = '';
  let selectedElement = null;
  let lastClickPosition = { x: 0, y: 0 };
  
  // Function to extract the sentence containing the selected word
  function getSentenceFromParagraph(paragraph, wordElement) {
    // Get all the spans in the paragraph in order
    const allWordsInParagraph = Array.from(paragraph.querySelectorAll('.selectable-word'));
    
    // Find the index of the clicked word element
    const wordIndex = allWordsInParagraph.indexOf(wordElement);
    
    if (wordIndex === -1) {
      // Fallback to paragraph if we can't find the word element
      return paragraph.textContent;
    }
    
    // Reconstruct the paragraph text with the correct position
    let reconstructedText = '';
    let wordPositions = [];
    
    // Build the text while tracking positions of each word
    for (let i = 0; i < allWordsInParagraph.length; i++) {
      const word = allWordsInParagraph[i];
      let nextNode = word.nextSibling;
      
      reconstructedText += word.textContent;
      wordPositions.push(reconstructedText.length - word.textContent.length);
      
      // Add any following text (punctuation, spaces) until the next word
      while (nextNode && nextNode !== allWordsInParagraph[i + 1]) {
        if (nextNode.nodeType === Node.TEXT_NODE) {
          reconstructedText += nextNode.textContent;
        }
        nextNode = nextNode.nextSibling;
      }
    }
    
    // Now find the sentence boundaries around the clicked word's position
    const clickedWordPosition = wordPositions[wordIndex];
    
    // Use regular expression to find sentence boundaries including commas and hyphens
    const sentenceRegex = /[^.!?,-]+[.!?,-]+/g;
    let match;
    let sentences = [];
    let positions = [];
    
    while ((match = sentenceRegex.exec(reconstructedText)) !== null) {
      sentences.push(match[0]);
      positions.push(match.index);
    }
    
    // If no punctuation found, the whole paragraph is one sentence
    if (sentences.length === 0) {
      return reconstructedText;
    }
    
    // Find which sentence contains the clicked word based on position
    for (let i = 0; i < sentences.length; i++) {
      const sentenceStart = positions[i];
      const sentenceEnd = sentenceStart + sentences[i].length;
      
      if (clickedWordPosition >= sentenceStart && clickedWordPosition < sentenceEnd) {
        // Clean up extra punctuation at the end and beginning
        return sentences[i].trim()
          .replace(/[,\-]+$/, punctuation => punctuation.charAt(0))  // Keep only one punctuation mark at the end
          .replace(/^[,\-]+/, '');  // Remove punctuation from the beginning
      }
    }
    
    // Fallback to the whole paragraph if we can't find the specific sentence
    return reconstructedText;
  }
  
  // Word selection handler
  function handleWordClick(e) {
    e.stopPropagation();
    
    // Save click position
    lastClickPosition = {
      x: e.clientX,
      y: e.clientY + window.scrollY
    };
    
    // Reset previous selection
    if (selectedElement) {
      selectedElement.classList.remove('selected');
    }
    
    // Set new selection
    selectedWord = this.textContent.replace(/[^\w\s]/g, ''); // Remove punctuation
    selectedElement = this;
    this.classList.add('selected');
    
    // Get the sentence containing the selected word
    const paragraph = this.closest('p');
    selectedSentence = getSentenceFromParagraph(paragraph, this);
    
    // Position popup at click position
    positionPopupAtClick(wordPopup);
    
    // Show loading state
    translation.textContent = 'Translating word...';
    sentenceTranslation.textContent = 'Translating sentence...';
    translation.style.display = 'block';
    sentenceTranslation.style.display = 'block';
    wordPopup.style.display = 'block';
    
    // Fetch translations
    fetchTranslation(selectedWord, 'word');
    fetchTranslation(selectedSentence, 'sentence');
  }
  
  // Position popup at the last click position
  function positionPopupAtClick(popup) {
    // Get available space
    const windowWidth = window.innerWidth;
    const popupWidth = 200; // Width from CSS
    
    // Calculate position (centered on click point)
    let leftPos = lastClickPosition.x - (popupWidth / 2);
    
    // Ensure popup doesn't go off-screen
    if (leftPos < 10) leftPos = 10;
    if (leftPos + popupWidth > windowWidth - 10) {
      leftPos = windowWidth - popupWidth - 10;
    }
    
    // Apply position
    popup.style.left = leftPos + 'px';
    popup.style.top = (lastClickPosition.y - 80) + 'px'; // 25px below click
  }
  
  // Fetch translation
  async function fetchTranslation(text, type) {
    try {
      const response = await fetch('/api/translate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          text: text,
          targetLang: 'pt' // Default to Portuguese
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        if (type === 'word') {
          translation.textContent = `Word: ${data.translation}`;
          wordTranslationInput.value = data.translation;
        } else {
          sentenceTranslation.textContent = `Sentence: ${data.translation}`;
        }
      } else {
        if (type === 'word') {
          translation.textContent = 'Word translation failed';
        } else {
          sentenceTranslation.textContent = 'Sentence translation failed';
        }
      }
    } catch (error) {
      if (type === 'word') {
        translation.textContent = 'Word translation failed';
      } else {
        sentenceTranslation.textContent = 'Sentence translation failed';
      }
      console.error('Translation error:', error);
    }
  }
  
  // Attach click handler to all selectable words
  selectableWords.forEach(word => {
    word.addEventListener('click', handleWordClick);
  });
  
  // Close popup when clicking elsewhere
  document.addEventListener('click', function(e) {
    if (!wordPopup.contains(e.target) && !addWordForm.contains(e.target) && 
        !e.target.classList.contains('selectable-word')) {
      wordPopup.style.display = 'none';
      addWordForm.style.display = 'none';
      
      if (selectedElement) {
        selectedElement.classList.remove('selected');
        selectedElement = null;
      }
    }
  });
  
  // Add to bank button
  addToBankBtn.addEventListener('click', function() {
    wordPopup.style.display = 'none';
    
    // Position form at the same position as the popup
    addWordForm.style.left = wordPopup.style.left;
    addWordForm.style.top = wordPopup.style.top;
    
    // Set the word in the form
    wordInput.value = selectedWord;
    
    // Show the form
    addWordForm.style.display = 'block';
  });
  
  // Close popup button
  closePopupBtn.addEventListener('click', function() {
    wordPopup.style.display = 'none';
    
    if (selectedElement) {
      selectedElement.classList.remove('selected');
      selectedElement = null;
    }
  });
  
  // Word bank form submission
  wordBankForm.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    try {
      const response = await fetch('/api/word-bank', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          word: wordInput.value,
          translation: wordTranslationInput.value,
          bookFilename: '<%= book.filename %>'
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        alert('Word added to bank');
        addWordForm.style.display = 'none';
        
        if (selectedElement) {
          selectedElement.classList.remove('selected');
          selectedElement = null;
        }
      } else {
        alert('Failed to add word');
      }
    } catch (error) {
      alert('Failed to add word');
      console.error('Add word error:', error);
    }
  });
  
  // Cancel add word button
  cancelAddWord.addEventListener('click', function() {
    addWordForm.style.display = 'none';
    
    if (selectedElement) {
      selectedElement.classList.remove('selected');
      selectedElement = null;
    }
  });

  // Set progress bar widths
  document.querySelectorAll('.progress-bar').forEach(bar => {
    const value = bar.getAttribute('aria-valuenow');
    bar.style.width = value + '%';
  });
  
  // Set background images
  document.querySelectorAll('.reader-content').forEach(content => {
    const bgPath = content.getAttribute('data-background');
    content.style.backgroundImage = `url('${bgPath}')`;
  });


    // Show vocabulary popup if it's the first page of an episode
  if (isFirstPage) {
      setTimeout(() => {
        showVocabPopup(filename, episodeNumber);
      }, 500); // Small delay to make it gracious
  }




});
</script>

<%- include('../partials/footer') %>