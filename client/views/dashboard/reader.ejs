<%- include('../partials/header') %>

<div class="reader-container">
  <div class="reader-header">
    <div class="book-info">
      <h1><%= book.title %></h1>
      <h2>Episode <%= currentEpisode %>: <%= book.episodeTitle %></h2>
    </div>
    <div class="reader-controls">
      <div class="page-navigation">
        <% if (prevPage) { %>
          <a href="/book/read/<%= book.filename %>?episode=<%= prevPage.episodeNumber %>&page=<%= prevPage.pageNumber %>" class="btn btn-primary">Previous Page</a>
        <% } %>
        
        <span class="page-info">Page <%= currentPage %> of <%= totalPagesInEpisode %> (Episode <%= currentEpisode %>)</span>
        
        <% if (nextPage) { %>
          <a href="/book/read/<%= book.filename %>?episode=<%= nextPage.episodeNumber %>&page=<%= nextPage.pageNumber %>" class="btn btn-primary">Next Page</a>
        <% } %>
      </div>

      <!-- Changed path here from /book to /dashboard -->
      <a href="/dashboard" class="btn btn-secondary close-btn">Close</a>
    </div>
  </div>
  
  
  
  <div class="reader-content" data-background="<%= backgroundImagePath %>">
    <div class="page-text">
      <%- textWithSpans %>
    </div>
  </div>
  
  <div id="word-popup" class="word-popup" style="display: none;">
    <div class="word-popup-content">
      <div id="translation" class="translation"></div>
      <div class="word-actions">
        <button id="add-to-bank-btn" class="btn btn-sm btn-secondary">Add to Word Bank</button>
        <button id="close-popup-btn" class="btn btn-sm btn-light">Close</button>
      </div>
    </div>
  </div>
  
  <div id="add-word-form" class="add-word-form" style="display: none;">
    <div class="form-content">
      <h3>Add to Word Bank</h3>
      <form id="wordBankForm">
        <div class="form-group">
          <label for="word">Word</label>
          <input type="text" id="word" name="word" class="form-control" readonly>
        </div>
        
        <div class="form-group">
          <label for="translation">Translation</label>
          <input type="text" id="word-translation" name="translation" class="form-control" required>
        </div>
        
        <div class="form-actions">
          <button type="submit" class="btn btn-primary">Add Word</button>
          <button type="button" id="cancel-add-word" class="btn btn-secondary">Cancel</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const selectableWords = document.querySelectorAll('.selectable-word');
  const wordPopup = document.getElementById('word-popup');
  const addToBankBtn = document.getElementById('add-to-bank-btn');
  const closePopupBtn = document.getElementById('close-popup-btn');
  const translation = document.getElementById('translation');
  const addWordForm = document.getElementById('add-word-form');
  const wordInput = document.getElementById('word');
  const wordTranslationInput = document.getElementById('word-translation');
  const wordBankForm = document.getElementById('wordBankForm');
  const cancelAddWord = document.getElementById('cancel-add-word');
  
  let selectedWord = '';
  let selectedElement = null;
  
  // Word selection
  selectableWords.forEach(word => {
    word.addEventListener('click', async function(e) {
      e.stopPropagation();
      
      // Reset previous selection
      if (selectedElement) {
        selectedElement.classList.remove('selected');
      }
      
      // Set new selection
      selectedWord = this.textContent.replace(/[^\w\s]/g, ''); // Remove punctuation
      selectedElement = this;
      this.classList.add('selected');
      
      // Position the popup based on click event coordinates
      const x = e.clientX;
      const y = e.clientY + window.scrollY;
      
      // Ensure popup is within viewport boundaries
      const popupWidth = 200; // Minimum width from CSS
      const windowWidth = window.innerWidth;
      
      // Calculate left position
      let leftPos = x - (popupWidth / 2);
      
      // Make sure popup doesn't go off the left edge
      leftPos = Math.max(10, leftPos);
      
      // Make sure popup doesn't go off the right edge
      leftPos = Math.min(windowWidth - popupWidth - 10, leftPos);
      
      // Position popup
      wordPopup.style.left = `${x}px`;
      wordPopup.style.top = `${y}px`; // 20px below the cursor
      
      // Show loading state in the translation area
      translation.textContent = 'Translating...';
      translation.style.display = 'block';
      
      // Show the popup with loading indicator
      wordPopup.style.display = 'block';
      
      // Fetch translation immediately
      try {
        const response = await fetch('/api/translate', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            text: selectedWord,
            targetLang: 'pt' // Default to Portuguese
          })
        });
        
        const data = await response.json();
        
        if (data.success) {
          translation.textContent = `Translation: ${data.translation}`;
          wordTranslationInput.value = data.translation;
        } else {
          translation.textContent = 'Translation failed';
        }
      } catch (error) {
        translation.textContent = 'Translation failed';
        console.error('Translation error:', error);
      }
    });
  });
  
  // Close popup when clicking elsewhere
  document.addEventListener('click', function(e) {
    if (!wordPopup.contains(e.target) && !addWordForm.contains(e.target) && 
        !e.target.classList.contains('selectable-word')) {
      wordPopup.style.display = 'none';
      addWordForm.style.display = 'none';
      
      if (selectedElement) {
        selectedElement.classList.remove('selected');
        selectedElement = null;
      }
    }
  });
  
  // Add to bank button
  addToBankBtn.addEventListener('click', function() {
    wordPopup.style.display = 'none';
    
    // Position form near the click position if we still have selectedElement
    if (selectedElement) {
      const rect = selectedElement.getBoundingClientRect();
      const x = rect.left + (rect.width / 2);
      const y = rect.bottom + window.scrollY;
      
      addWordForm.style.left = `${x - 150}px`; // Center the form
      addWordForm.style.top = `${y + 10}px`;
    }
    
    // Set the word in the form
    wordInput.value = selectedWord;
    
    // Show the form
    addWordForm.style.display = 'block';
  });
  
  // Close popup button
  closePopupBtn.addEventListener('click', function() {
    wordPopup.style.display = 'none';
    
    if (selectedElement) {
      selectedElement.classList.remove('selected');
      selectedElement = null;
    }
  });
  
  // Word bank form submission
  wordBankForm.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    try {
      const response = await fetch('/api/word-bank', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          word: wordInput.value,
          translation: wordTranslationInput.value,
          bookFilename: '<%= book.filename %>'
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        alert('Word added to bank');
        addWordForm.style.display = 'none';
        
        if (selectedElement) {
          selectedElement.classList.remove('selected');
          selectedElement = null;
        }
      } else {
        alert('Failed to add word');
      }
    } catch (error) {
      alert('Failed to add word');
      console.error('Add word error:', error);
    }
  });
  
  // Cancel add word button
  cancelAddWord.addEventListener('click', function() {
    addWordForm.style.display = 'none';
    
    if (selectedElement) {
      selectedElement.classList.remove('selected');
      selectedElement = null;
    }
  });

  // Set progress bar widths
  document.querySelectorAll('.progress-bar').forEach(bar => {
    const value = bar.getAttribute('aria-valuenow');
    bar.style.width = value + '%';
  });
  
  // Set background images
  document.querySelectorAll('.reader-content').forEach(content => {
    const bgPath = content.getAttribute('data-background');
    content.style.backgroundImage = `url('${bgPath}')`;
  });
});
</script>

<%- include('../partials/footer') %>